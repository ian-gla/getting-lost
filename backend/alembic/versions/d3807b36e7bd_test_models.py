"""test models

Revision ID: d3807b36e7bd
Revises:
Create Date: 2025-01-09 13:52:08.062396

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = "d3807b36e7bd"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("create extension if not exists postgis")
    op.create_table(
        "positions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "start",
            geoalchemy2.types.Geometry(
                geometry_type="POINT", srid=4326, from_text="ST_GeomFromEWKT", name="geometry"
            ),
            nullable=True,
        ),
        sa.Column(
            "lost",
            geoalchemy2.types.Geometry(
                geometry_type="POINT", srid=4326, from_text="ST_GeomFromEWKT", name="geometry"
            ),
            nullable=True,
        ),
        sa.Column(
            "end",
            geoalchemy2.types.Geometry(
                geometry_type="POINT", srid=4326, from_text="ST_GeomFromEWKT", name="geometry"
            ),
            nullable=True,
        ),
        sa.Column("start_radius", sa.Integer(), nullable=True),
        sa.Column("lost_radius", sa.Integer(), nullable=True),
        sa.Column("end_radius", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="lost",
    )
    op.create_index(
        "idx_positions_end", "positions", ["end"], unique=False, schema="lost", postgresql_using="gist"
    )
    op.create_index(
        "idx_positions_lost", "positions", ["lost"], unique=False, schema="lost", postgresql_using="gist"
    )
    op.create_index(
        "idx_positions_start", "positions", ["start"], unique=False, schema="lost", postgresql_using="gist"
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("age", sa.Integer(), nullable=False),
        sa.Column("gender", sa.Integer(), nullable=False),
        sa.Column("nav_skill", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="lost",
    )
    op.create_table(
        "events",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user", sa.Integer(), nullable=False),
        sa.Column("position", sa.Integer(), nullable=False),
        sa.Column("when", sa.String(length=15), nullable=True),
        sa.Column("time_of_day", sa.String(length=10), nullable=True),
        sa.Column("day_of_week", sa.String(length=10), nullable=True),
        sa.Column("guidance", sa.String(length=20), nullable=True),
        sa.Column("group", sa.String(length=10), nullable=True),
        sa.Column("factors", sa.String(length=30), nullable=True),
        sa.Column("familiarity", sa.Integer(), nullable=True),
        sa.Column("context", sa.Text(), nullable=True),
        sa.Column("explain", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(["position"], ["lost.positions.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user"], ["lost.users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        schema="lost",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("events", schema="lost")
    op.drop_table("users", schema="lost")
    op.drop_index("idx_positions_start", table_name="positions", schema="lost", postgresql_using="gist")
    op.drop_index("idx_positions_lost", table_name="positions", schema="lost", postgresql_using="gist")
    op.drop_index("idx_positions_end", table_name="positions", schema="lost", postgresql_using="gist")
    op.drop_table("positions", schema="lost")
    op.drop.schema("lost")
    # ### end Alembic commands ###
